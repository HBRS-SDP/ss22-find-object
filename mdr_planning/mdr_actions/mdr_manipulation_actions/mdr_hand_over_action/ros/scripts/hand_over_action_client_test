#! /usr/bin/env python
from __future__ import print_function
import argparse
import rospy
import actionlib
import numpy as np

from mdr_hand_over_action.msg import HandOverAction, HandOverGoal

if __name__ == '__main__':
    posture_contexts = ['standing', 'sitting', 'lying_down']
    obstacle_contexts = [0, 1]                                 # 0: no obstacle, 1: obstacle
    
    parser = argparse.ArgumentParser(description='help text')
    parser.add_argument("--context", "-c", help="list of context parameters. E.g.: ['sitting', 0]") 
    args = parser.parse_args()

    if not args.context:
        print('No context parameters provided!')
        print('Example inputs: ')
        print('- python hand_over_action_client_test -c "[\'standing\', 0]"')
        print('- python hand_over_action_client_test -c "[\'sitting\', 1]"')
    elif len(args.context) != 2:
        print('Expected two context parameters: posture and obstacle!')
    elif args.context[0] not in posture_contexts:
        print('Invalid posture context!')
    elif args.context[1] not in obstacle_contexts:
        print('Invalid obstacle context!')
    else:
        posture_context = args.context[0]
        obstacle_context = args.context[1]

        rospy.init_node('hand_over_action_client_test')

        client = actionlib.SimpleActionClient('/hand_over_server', HandOverAction)
        client.wait_for_server()

        goal = HandOverGoal()

        goal.posture_type = args.context[0]
        goal.obstacle = args.context[1]

        timeout = 15.0
        rospy.loginfo('Sending action lib goal to hand_over_server')
        client.send_goal(goal)
        client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
        print(client.get_result())
