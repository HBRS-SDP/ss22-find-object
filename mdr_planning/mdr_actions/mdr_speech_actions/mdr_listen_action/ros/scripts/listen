#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on 2018.10.09

@author: Roberto Cai
@email: roberto.cai@smail.inf.h-brs.de
"""
import rospy
import actionlib

from mdr_listen_action.msg import ListenAction, ListenResult, ListenFeedback
from mdr_listen_action.action_states import ListenSM

class ListenServer(object):

    def __init__(self):
        self.model_directory = rospy.get_param('~model_directory')
        self.use_kaldi = rospy.get_param('~use_kaldi')
        print(self.model_directory)
        rospy.loginfo('[listen] Initialising state machine')
        self.action_sm = ListenSM(model_directory=self.model_directory,
                                  use_kaldi=self.use_kaldi)
        rospy.loginfo('[listen] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('listen_server',
                                                          ListenAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('listen action server ready')

    def execute(self, goal):
        rospy.loginfo('[listen] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)


if __name__ == '__main__':
    rospy.init_node('listen_server')
    listen_server = ListenServer()
    try:
        listen_server.action_sm.run()
        while listen_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(listen_server.action_sm.name))
        pickup_server.action_sm.stop()
