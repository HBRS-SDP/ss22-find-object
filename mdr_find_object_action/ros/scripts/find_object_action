#!/usr/bin/env python
import rospy
import actionlib
from std_msgs.msg import String
from geometry_msgs.msg import PoseWithCovarianceStamped
from geometry_msgs.msg import PoseStamped
from mdr_find_object_action.msg import FindObjectAction
from mdr_find_object_action.action_states import FindObjectSM
from mas_knowledge_base.domestic_kb_interface import DomesticKBInterface
from mdr_move_base_action.msg import MoveBaseAction, MoveBaseGoal
from mdr_perceive_plane_action.msg import PerceivePlaneAction,PerceivePlaneGoal 
from mdr_find_object_action.msg import FindObjectGoal, FindObjectResult
from mdr_move_base_action.action_states import MoveBaseSM
import numpy as np
import yaml
from yaml.loader import SafeLoader
from mdr_pickup_action.msg import PickupAction, PickupGoal
from mdr_place_action.msg import PlaceAction, PlaceGoal

class FindObjectServer(object):
    '''A server exposing an action for locating objects.

    The server expects the following parameters to be made available on the ROS parameter server:
    * ontology_url: URL of a domestic ontology file
    * ontology_class_prefix: Prefix of the classes in the ontology
    * retry_count_on_failure: Number of times the search should be retried
                              if it fails the first time
    * timeout_s: Timeout (in seconds) for the action execution

    @author Alex Mitrevski
    @contact aleksandar.mitrevski@h-brs.de

    '''
    def __init__(self):
        ontology_url = rospy.get_param('~ontology_url', '')
        ontology_base_url = rospy.get_param('~ontology_base_url', '')
        ontology_entity_delimiter = rospy.get_param('~ontology_entity_delimiter', '')
        ontology_class_prefix = rospy.get_param('~ontology_class_prefix', '')
        retry_count_on_failure = int(rospy.get_param('~retry_count_on_failure', 0))
        timeout_s = float(rospy.get_param('~timeout_s', 120.))
        move_base_server='/move_base_server'
        perceive_plane_server = '/mdr_actions/perceive_plane_server'
        pickup_server = 'pickup_server'
        place_server = 'place_server'

        if not ontology_url:
            rospy.logerr('[find_object] Ontology url not specified')

        if not ontology_class_prefix:
            rospy.logerr('[find_object] Ontology class prefix not specified')

        rospy.loginfo('[find_object] Initialising state machine')
        self.action_sm = FindObjectSM(ontology_url=ontology_url,
                                      ontology_base_url=ontology_base_url,
                                      ontology_entity_delimiter=ontology_entity_delimiter,
                                      ontology_class_prefix=ontology_class_prefix,
                                      number_of_retries=retry_count_on_failure,
                                      timeout=timeout_s,
                                      move_base_server=move_base_server,
                                      perceive_plane_server=perceive_plane_server)
        rospy.loginfo('[find_object] State machine initialised')

        self.action_server = actionlib.SimpleActionServer('find_object_server',
                                                          FindObjectAction,
                                                          self.execute, False)
        self.action_server.start()
        rospy.loginfo('find_object action server ready')

        # # spanch2s knowledge base
        # try:
        #     rospy.loginfo('[find_object] Creating a knowledge base interface client')
        #     self.kb_interface = DomesticKBInterface()
        # except Exception as exc:
        #     rospy.logerr('[find_object] Could not create a knowledge base interface client: %s', exc)

        
        # spanch2s navigation
        try:
            self.move_base_client = actionlib.SimpleActionClient(move_base_server, MoveBaseAction)
            rospy.loginfo('[pickup] Waiting for %s server', move_base_server)
            self.move_base_client.wait_for_server()
        except Exception as exc:
            rospy.logerr('[pickup] %s server does not seem to respond: %s',
                    move_base_server, str(exc))

        # spanch2s Perception
        try:
            self.perceive_plane_client = actionlib.SimpleActionClient(perceive_plane_server,PerceivePlaneAction)
            rospy.loginfo('[pickup] Waiting for %s server', perceive_plane_server)
            self.perceive_plane_client.wait_for_server()
        except Exception as exc:
            rospy.logerr('[pickup] %s server does not seem to respond: %s',
                         perceive_plane_server, str(exc))

        # spanch2s manipulation-pickup
        try:
            self.pickup_client = actionlib.SimpleActionClient(pickup_server, PickupAction)
            rospy.loginfo('[pickup] Waiting for %s server', pickup_server)
            self.pickup_client.wait_for_server()
        except Exception as exc:
            rospy.logerr('[pickup] %s server does not seem to respond: %s',
                         pickup_server, str(exc))
        
        # spanch2s manipulation - place  -@@
        # try:
        #     self.place_client = actionlib.SimpleActionClient(place_server,PlaceAction)
        #     rospy.loginfo('[pickup] Waiting for %s server', place_server)
        #     self.place_client.wait_for_server()
        # except Exception as exc:
        #     rospy.logerr('[pickup] %s server does not seem to respond: %s',
        #                  place_server, str(exc))
        
        try:
            self.current_location_subscriber()
        except:
            print("not subscribed to current coordinates")

    def location_callback(self,msg):
        self.x = msg.pose.pose.position.x
        self.y = msg.pose.pose.position.y
        self.z = msg.pose.pose.position.z

    def current_location_call_back(self,msg):
        self.x = msg.pose.position.x
        self.y = msg.pose.position.y
        self.z = msg.pose.position.z
        
    def current_location_subscriber(self):
        rospy.init_node('find_object_server')
        subscriber = rospy.Subscriber('/laser_2d_correct_pose',PoseWithCovarianceStamped,callback=self.location_callback)
        # subscriber = rospy.Subscriber('/global_pose',PoseStamped,callback=self.current_location_call_back)
        # rospy.spin()

    def execute(self, goal):

        say_pub = rospy.Publisher('/say', String, latch=True,queue_size=1)
        current_coordinates = [self.x,self.y,self.z]
        rospy.loginfo('[find_object] Received an action request')
        self.action_sm.goal = goal
        self.action_sm.result = None
        self.action_sm.execution_requested = True
        while not self.action_sm.result:
            rospy.sleep(0.05)
        self.action_server.set_succeeded(self.action_sm.result)

        # Results from ontology
        obj_name = self.action_sm.result.obj_name
        natural_locations = self.action_sm.result.natural_location
        print("Natural locations of the object are : ", natural_locations)

        # navigation
        navigation_goal = MoveBaseGoal()
        navigation_goal.goal_type = MoveBaseGoal.NAMED_TARGET


        # perception
        perceive_plane_goal = PerceivePlaneGoal()
        perceive_plane_goal.plane_config = 'table'
        perceive_plane_goal.plane_frame_prefix = 'frame_table'

        # Manipulation - pickup
        pickup_goal = PickupGoal()
        pickup_goal.pose.header.frame_id = 'base_link'
        pickup_goal.pose.header.stamp = rospy.Time.now()

        # Manipulation - place  @@
        # place_goal = PlaceGoal()
        # place_goal.pose.header.frame_id = 'base_link'
        # place_goal.pose.header.stamp = rospy.Time.now()

        move_base = MoveBaseSM()


        distance_dict = {}

        for location in natural_locations:
            # get the coordinates
            try:
                location_coordinates = move_base.convert_pose_name_to_coordinates(location)
                print("next location coordinates from move base state machine",location_coordinates)
                distance = np.linalg.norm(np.array(current_coordinates) - np.array(location_coordinates))
                distance_dict[location] = distance
            except:
                with open('/home/sathwikpanchngam/sdp_ws/src/mas_environments/lucy/brsu-c069/navigation_goals.yaml','r') as f:
                    data = yaml.load(f,Loader=SafeLoader)
                location_coordinates = data[location]
                print("Coordinates from yaml file "+ str(location)+"  "+str(location_coordinates))
                distance = np.linalg.norm(np.array(current_coordinates) - np.array(location_coordinates))
                distance_dict[location] = distance
        new_natural_locations_dict = dict(sorted(distance_dict.items(), key=lambda item: item[1]))

        for location in new_natural_locations_dict.keys():
            print("Location inside the loop is",location)
            navigation_goal.destination_location = location
            timeout = 45.0
            rospy.loginfo('Sending action lib goal to move_base_server, ' +
                          'destination : ' + navigation_goal.destination_location)
            
            self.move_base_client.send_goal(navigation_goal)
            print("navigation goal sent to move base client")
            say_pub.publish("moving to"+str(location))
            self.move_base_client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
            print("state",self.move_base_client.get_state())
            if self.move_base_client.get_state() ==3:
                self.move_base_client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
                if self.move_base_client.get_state() == 3:
                    print("Result when equal to 3",self.move_base_client.get_state())
                    try:
                        perceive_timeout = 30.0
                        rospy.loginfo('Sending action lib goal to perceive_plane_server')
                        self.perceive_plane_client.send_goal(perceive_plane_goal)
                        say_pub.publish("perceiving the plane")
                        self.perceive_plane_client.wait_for_result(rospy.Duration.from_sec(int(perceive_timeout)))

                        perception_results = self.perceive_plane_client.get_result()
                        objects_list = perception_results.objects_list
                        objects = perception_results.objects

                        if obj_name in objects_list:
                            say_pub.publish("detected a "+str(obj_name))
                            pickup_timeout = 45.0
                            for obj in objects:
                                if obj.name == obj_name:
                                    pickup_goal.pose.pose.position.x = obj.pose.pose.position.x
                                    pickup_goal.pose.pose.position.y = obj.pose.pose.position.y
                                    pickup_goal.pose.pose.position.z = obj.pose.pose.position.z

                                    pickup_goal.pose.pose.orientation.x = obj.pose.pose.orientation.x
                                    pickup_goal.pose.pose.orientation.y = obj.pose.pose.orientation.y
                                    pickup_goal.pose.pose.orientation.z = obj.pose.pose.orientation.z
                                    pickup_goal.pose.pose.orientation.w = obj.pose.pose.orientation.w

                                    rospy.loginfo('Sending action lib goal to pickup_server')
                                    say_pub.publish('Picking up '+str(obj_name))
                                    self.pickup_client.send_goal(pickup_goal)
                                    self.pickup_client.wait_for_result(rospy.Duration.from_sec(int(pickup_timeout)))
                                    print("Waiting for pick result of pickup state")
                                    # rospy.loginfo('Pick up state: ',self.pickup_client.get_state())
                                    print('Pick up state: ',self.pickup_client.get_state())
                                    rospy.loginfo("Successfully picked the object")

                                    self.move_base_client.send_goal('user_location')
                                    print("Moving to user location")
                                    say_pub.publish("Going to user location")
                                    self.move_base_client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
                                    if self.move_base_client.get_state() == 3:
                                        print("reached user location")
                                        # place_goal.pose.pose.position.x = obj.pose.pose.position.x # @@
                                        # place_goal.pose.pose.position.y = obj.pose.pose.position.y
                                        # place_goal.pose.pose.position.z = obj.pose.pose.position.z

                                        # place_goal.pose.pose.orientation.x = obj.pose.pose.orientation.x
                                        # place_goal.pose.pose.orientation.y = obj.pose.pose.orientation.y
                                        # place_goal.pose.pose.orientation.z = obj.pose.pose.orientation.z
                                        # place_goal.pose.pose.orientation.w = obj.pose.pose.orientation.w

                                        # rospy.loginfo('Sending action lib goal to place server')
                                        # say_pub.publish('Placing the object '+ str(obj_name))
                                        # self.place_client.send_goal(place_goal)
                                        # self.place_client.wait_for_result(rospy.Duration.from_sec(int(pickup_timeout)))
                                        # print('waiting for place results')
                                        # print('place state : ', self.place_client.get_state())
                                        # print("Placed object successfully")
                                        # print('Place results',self.place_client.get_result())
                                    else:
                                        print("Near the user location state is 1")
                                    break
                        else:
                            print("Goto to next location and perceive again")
                            say_pub.publish(str(obj_name)+" is not detected")
                    except:
                        print("entered exception condition")
                        say_pub.publish("Could not perceive the plane")
                else:
                    print("exited the while loop")
                    self.move_base_client.wait_for_result(rospy.Duration.from_sec(int(timeout)))








                # try:
                #     timeout = 45.0
                #     rospy.loginfo('Sending action lib goal to perceive_plane_server')
                #     self.perceive_plane_client.send_goal(perceive_plane_goal)
                    
                #     self.perceive_plane_client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
                    
                #     perception_results = self.perceive_plane_client.get_result()
                    
                #     objects_list = perception_results.objects_list

                #     objects = perception_results.objects
                #     if obj_name in objects_list:
                #     # if '055_baseball' in objects_list:
                #         say_pub.publish("detected a "+str(obj_name))
                #         for obj in objects:
                #             if obj.name == obj_name:
                #             # if obj.name == '055_baseball':
                #                 pickup_goal.pose.pose.position.x = obj.pose.pose.position.x
                #                 pickup_goal.pose.pose.position.y = obj.pose.pose.position.y
                #                 pickup_goal.pose.pose.position.z = obj.pose.pose.position.z

                #                 pickup_goal.pose.pose.orientation.x = obj.pose.pose.orientation.x
                #                 pickup_goal.pose.pose.orientation.y = obj.pose.pose.orientation.y
                #                 pickup_goal.pose.pose.orientation.z = obj.pose.pose.orientation.z
                #                 pickup_goal.pose.pose.orientation.w = obj.pose.pose.orientation.w

                #                 say_pub.publish('Picking up '+str(obj_name))
                #                 self.pickup_client.send_goal(pickup_goal)
                #                 self.pickup_client.wait_for_result()

                #                 rospy.loginfo('Pick up results : ',self.pickup_client.get_state())

                #                 rospy.loginfo("Successfully picked the object")

                #                 self.move_base_client.send_goal('user_location')
                #                 print("Moving to user location")
                #                 self.move_base_client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
                #                 break
                #     else:
                #         print("Goto to next location and perceive again")
                #         say_pub.publish(str(obj_name)+" is not detected")
                # except:
                #     rospy.loginfo("failed to pickup the object")


if __name__ == '__main__':
    rospy.init_node('find_object_server')
    find_object_server = FindObjectServer()
    try:
        find_object_server.action_sm.run()
        while find_object_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()

    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(find_object_server.action_sm.name))
        find_object_server.action_sm.stop()